// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: person.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Db {

  /// <summary>Holder for reflection information generated from person.proto</summary>
  public static partial class PersonReflection {

    #region Descriptor
    /// <summary>File descriptor for person.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PersonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxwZXJzb24ucHJvdG8SAmRiImcKB2ZkX3Rhc2sSFAoHdGFza19pZBgBIAEo",
            "BUgAiAEBEhIKBWNvdW50GAIgASgFSAGIAQESEgoFc3RhdGUYAyABKAVIAogB",
            "AUIKCghfdGFza19pZEIICgZfY291bnRCCAoGX3N0YXRlIkEKB2ZkX2l0ZW0S",
            "EAoDdGlkGAEgASgFSACIAQESEgoFY291bnQYAiABKAVIAYgBAUIGCgRfdGlk",
            "QggKBl9jb3VudCKRAgoJdGJfcGVyc29uEhEKBHV1aWQYASABKARIAIgBARIQ",
            "CgNqb2IYAiABKAVIAYgBARIRCgRuYW1lGAMgASgJSAKIAQESHgoEaXRlbRgT",
            "IAEoCzILLmRiLmZkX2l0ZW1IA4gBARIeCglpdGVtX2xpc3QYFCADKAsyCy5k",
            "Yi5mZF9pdGVtEiwKCGl0ZW1fbWFwGBUgAygLMhouZGIudGJfcGVyc29uLkl0",
            "ZW1NYXBFbnRyeRo7CgxJdGVtTWFwRW50cnkSCwoDa2V5GAEgASgEEhoKBXZh",
            "bHVlGAIgASgLMgsuZGIuZmRfaXRlbToCOAFCBwoFX3V1aWRCBgoEX2pvYkIH",
            "CgVfbmFtZUIHCgVfaXRlbSKjAQoMZmRfaXRlbV9saXN0EiQKD2l0ZW1fbGlz",
            "dF90b3RhbBgJIAMoCzILLmRiLmZkX2l0ZW0SIgoNaXRlbV9saXN0X2FkZBgK",
            "IAMoCzILLmRiLmZkX2l0ZW0SJQoQaXRlbV9saXN0X2NoYW5nZRgLIAMoCzIL",
            "LmRiLmZkX2l0ZW0SIgoNaXRlbV9saXN0X2RlbBgMIAMoCzILLmRiLmZkX2l0",
            "ZW0i+AMKC2ZkX2l0ZW1fbWFwEjkKDml0ZW1fbWFwX3RvdGFsGBUgAygLMiEu",
            "ZGIuZmRfaXRlbV9tYXAuSXRlbU1hcFRvdGFsRW50cnkSNQoMaXRlbV9tYXBf",
            "YWRkGBYgAygLMh8uZGIuZmRfaXRlbV9tYXAuSXRlbU1hcEFkZEVudHJ5EjsK",
            "D2l0ZW1fbWFwX2NoYW5nZRgXIAMoCzIiLmRiLmZkX2l0ZW1fbWFwLkl0ZW1N",
            "YXBDaGFuZ2VFbnRyeRI1CgxpdGVtX21hcF9kZWwYGCADKAsyHy5kYi5mZF9p",
            "dGVtX21hcC5JdGVtTWFwRGVsRW50cnkaQAoRSXRlbU1hcFRvdGFsRW50cnkS",
            "CwoDa2V5GAEgASgEEhoKBXZhbHVlGAIgASgLMgsuZGIuZmRfaXRlbToCOAEa",
            "PgoPSXRlbU1hcEFkZEVudHJ5EgsKA2tleRgBIAEoBBIaCgV2YWx1ZRgCIAEo",
            "CzILLmRiLmZkX2l0ZW06AjgBGkEKEkl0ZW1NYXBDaGFuZ2VFbnRyeRILCgNr",
            "ZXkYASABKAQSGgoFdmFsdWUYAiABKAsyCy5kYi5mZF9pdGVtOgI4ARo+Cg9J",
            "dGVtTWFwRGVsRW50cnkSCwoDa2V5GAEgASgEEhoKBXZhbHVlGAIgASgLMgsu",
            "ZGIuZmRfaXRlbToCOAEi+QEKD3RiX3BlcnNvbl9tZXJnZRIRCgR1dWlkGAEg",
            "ASgESACIAQESEAoDam9iGAIgASgFSAGIAQESEQoEbmFtZRgDIAEoCUgCiAEB",
            "Eh4KBGl0ZW0YEyABKAsyCy5kYi5mZF9pdGVtSAOIAQESKAoJaXRlbV9saXN0",
            "GBQgASgLMhAuZGIuZmRfaXRlbV9saXN0SASIAQESJgoIaXRlbV9tYXAYFSAB",
            "KAsyDy5kYi5mZF9pdGVtX21hcEgFiAEBQgcKBV91dWlkQgYKBF9qb2JCBwoF",
            "X25hbWVCBwoFX2l0ZW1CDAoKX2l0ZW1fbGlzdEILCglfaXRlbV9tYXBiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Db.fd_task), global::Db.fd_task.Parser, new[]{ "TaskId", "Count", "State" }, new[]{ "TaskId", "Count", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Db.fd_item), global::Db.fd_item.Parser, new[]{ "Tid", "Count" }, new[]{ "Tid", "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Db.tb_person), global::Db.tb_person.Parser, new[]{ "Uuid", "Job", "Name", "Item", "ItemList", "ItemMap" }, new[]{ "Uuid", "Job", "Name", "Item" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Db.fd_item_list), global::Db.fd_item_list.Parser, new[]{ "ItemListTotal", "ItemListAdd", "ItemListChange", "ItemListDel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Db.fd_item_map), global::Db.fd_item_map.Parser, new[]{ "ItemMapTotal", "ItemMapAdd", "ItemMapChange", "ItemMapDel" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Db.tb_person_merge), global::Db.tb_person_merge.Parser, new[]{ "Uuid", "Job", "Name", "Item", "ItemList", "ItemMap" }, new[]{ "Uuid", "Job", "Name", "Item", "ItemList", "ItemMap" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class fd_task : pb::IMessage<fd_task>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<fd_task> _parser = new pb::MessageParser<fd_task>(() => new fd_task());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<fd_task> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Db.PersonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_task() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_task(fd_task other) : this() {
      _hasBits0 = other._hasBits0;
      taskId_ = other.taskId_;
      count_ = other.count_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_task Clone() {
      return new fd_task(this);
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { if ((_hasBits0 & 1) != 0) { return taskId_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        taskId_ = value;
      }
    }
    /// <summary>Gets whether the "task_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTaskId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "task_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTaskId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 2) != 0) { return count_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 3;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { if ((_hasBits0 & 4) != 0) { return state_; } else { return 0; } }
      set {
        _hasBits0 |= 4;
        state_ = value;
      }
    }
    /// <summary>Gets whether the "state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearState() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as fd_task);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(fd_task other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (Count != other.Count) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTaskId) hash ^= TaskId.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (HasState) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTaskId) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTaskId) {
        output.WriteRawTag(8);
        output.WriteInt32(TaskId);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (HasState) {
        output.WriteRawTag(24);
        output.WriteInt32(State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTaskId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskId);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (HasState) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(fd_task other) {
      if (other == null) {
        return;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasState) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TaskId = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class fd_item : pb::IMessage<fd_item>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<fd_item> _parser = new pb::MessageParser<fd_item>(() => new fd_item());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<fd_item> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Db.PersonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_item() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_item(fd_item other) : this() {
      _hasBits0 = other._hasBits0;
      tid_ = other.tid_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_item Clone() {
      return new fd_item(this);
    }

    /// <summary>Field number for the "tid" field.</summary>
    public const int TidFieldNumber = 1;
    private int tid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tid {
      get { if ((_hasBits0 & 1) != 0) { return tid_; } else { return 0; } }
      set {
        _hasBits0 |= 1;
        tid_ = value;
      }
    }
    /// <summary>Gets whether the "tid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "tid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { if ((_hasBits0 & 2) != 0) { return count_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        count_ = value;
      }
    }
    /// <summary>Gets whether the "count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as fd_item);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(fd_item other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tid != other.Tid) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTid) hash ^= Tid.GetHashCode();
      if (HasCount) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTid) {
        output.WriteRawTag(8);
        output.WriteInt32(Tid);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTid) {
        output.WriteRawTag(8);
        output.WriteInt32(Tid);
      }
      if (HasCount) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasTid) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tid);
      }
      if (HasCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(fd_item other) {
      if (other == null) {
        return;
      }
      if (other.HasTid) {
        Tid = other.Tid;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Tid = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Tid = input.ReadInt32();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// [START messages]
  /// </summary>
  public sealed partial class tb_person : pb::IMessage<tb_person>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<tb_person> _parser = new pb::MessageParser<tb_person>(() => new tb_person());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tb_person> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Db.PersonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tb_person() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tb_person(tb_person other) : this() {
      _hasBits0 = other._hasBits0;
      uuid_ = other.uuid_;
      job_ = other.job_;
      name_ = other.name_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      itemList_ = other.itemList_.Clone();
      itemMap_ = other.itemMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tb_person Clone() {
      return new tb_person(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { if ((_hasBits0 & 1) != 0) { return uuid_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        uuid_ = value;
      }
    }
    /// <summary>Gets whether the "uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUuid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUuid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int JobFieldNumber = 2;
    private int job_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Job {
      get { if ((_hasBits0 & 2) != 0) { return job_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        job_ = value;
      }
    }
    /// <summary>Gets whether the "job" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJob {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "job" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJob() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 19;
    private global::Db.fd_item item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Db.fd_item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 20;
    private static readonly pb::FieldCodec<global::Db.fd_item> _repeated_itemList_codec
        = pb::FieldCodec.ForMessage(162, global::Db.fd_item.Parser);
    private readonly pbc::RepeatedField<global::Db.fd_item> itemList_ = new pbc::RepeatedField<global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Db.fd_item> ItemList {
      get { return itemList_; }
    }

    /// <summary>Field number for the "item_map" field.</summary>
    public const int ItemMapFieldNumber = 21;
    private static readonly pbc::MapField<ulong, global::Db.fd_item>.Codec _map_itemMap_codec
        = new pbc::MapField<ulong, global::Db.fd_item>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Db.fd_item.Parser), 170);
    private readonly pbc::MapField<ulong, global::Db.fd_item> itemMap_ = new pbc::MapField<ulong, global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Db.fd_item> ItemMap {
      get { return itemMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tb_person);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tb_person other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Job != other.Job) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if(!itemList_.Equals(other.itemList_)) return false;
      if (!ItemMap.Equals(other.ItemMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUuid) hash ^= Uuid.GetHashCode();
      if (HasJob) hash ^= Job.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      hash ^= itemList_.GetHashCode();
      hash ^= ItemMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUuid) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (HasJob) {
        output.WriteRawTag(16);
        output.WriteInt32(Job);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (item_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Item);
      }
      itemList_.WriteTo(output, _repeated_itemList_codec);
      itemMap_.WriteTo(output, _map_itemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUuid) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (HasJob) {
        output.WriteRawTag(16);
        output.WriteInt32(Job);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (item_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Item);
      }
      itemList_.WriteTo(ref output, _repeated_itemList_codec);
      itemMap_.WriteTo(ref output, _map_itemMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUuid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (HasJob) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Job);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (item_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      size += itemList_.CalculateSize(_repeated_itemList_codec);
      size += itemMap_.CalculateSize(_map_itemMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tb_person other) {
      if (other == null) {
        return;
      }
      if (other.HasUuid) {
        Uuid = other.Uuid;
      }
      if (other.HasJob) {
        Job = other.Job;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::Db.fd_item();
        }
        Item.MergeFrom(other.Item);
      }
      itemList_.Add(other.itemList_);
      itemMap_.Add(other.itemMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Job = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 154: {
            if (item_ == null) {
              Item = new global::Db.fd_item();
            }
            input.ReadMessage(Item);
            break;
          }
          case 162: {
            itemList_.AddEntriesFrom(input, _repeated_itemList_codec);
            break;
          }
          case 170: {
            itemMap_.AddEntriesFrom(input, _map_itemMap_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Job = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 154: {
            if (item_ == null) {
              Item = new global::Db.fd_item();
            }
            input.ReadMessage(Item);
            break;
          }
          case 162: {
            itemList_.AddEntriesFrom(ref input, _repeated_itemList_codec);
            break;
          }
          case 170: {
            itemMap_.AddEntriesFrom(ref input, _map_itemMap_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class fd_item_list : pb::IMessage<fd_item_list>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<fd_item_list> _parser = new pb::MessageParser<fd_item_list>(() => new fd_item_list());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<fd_item_list> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Db.PersonReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_item_list() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_item_list(fd_item_list other) : this() {
      itemListTotal_ = other.itemListTotal_.Clone();
      itemListAdd_ = other.itemListAdd_.Clone();
      itemListChange_ = other.itemListChange_.Clone();
      itemListDel_ = other.itemListDel_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_item_list Clone() {
      return new fd_item_list(this);
    }

    /// <summary>Field number for the "item_list_total" field.</summary>
    public const int ItemListTotalFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Db.fd_item> _repeated_itemListTotal_codec
        = pb::FieldCodec.ForMessage(74, global::Db.fd_item.Parser);
    private readonly pbc::RepeatedField<global::Db.fd_item> itemListTotal_ = new pbc::RepeatedField<global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Db.fd_item> ItemListTotal {
      get { return itemListTotal_; }
    }

    /// <summary>Field number for the "item_list_add" field.</summary>
    public const int ItemListAddFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Db.fd_item> _repeated_itemListAdd_codec
        = pb::FieldCodec.ForMessage(82, global::Db.fd_item.Parser);
    private readonly pbc::RepeatedField<global::Db.fd_item> itemListAdd_ = new pbc::RepeatedField<global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Db.fd_item> ItemListAdd {
      get { return itemListAdd_; }
    }

    /// <summary>Field number for the "item_list_change" field.</summary>
    public const int ItemListChangeFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Db.fd_item> _repeated_itemListChange_codec
        = pb::FieldCodec.ForMessage(90, global::Db.fd_item.Parser);
    private readonly pbc::RepeatedField<global::Db.fd_item> itemListChange_ = new pbc::RepeatedField<global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Db.fd_item> ItemListChange {
      get { return itemListChange_; }
    }

    /// <summary>Field number for the "item_list_del" field.</summary>
    public const int ItemListDelFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Db.fd_item> _repeated_itemListDel_codec
        = pb::FieldCodec.ForMessage(98, global::Db.fd_item.Parser);
    private readonly pbc::RepeatedField<global::Db.fd_item> itemListDel_ = new pbc::RepeatedField<global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Db.fd_item> ItemListDel {
      get { return itemListDel_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as fd_item_list);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(fd_item_list other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemListTotal_.Equals(other.itemListTotal_)) return false;
      if(!itemListAdd_.Equals(other.itemListAdd_)) return false;
      if(!itemListChange_.Equals(other.itemListChange_)) return false;
      if(!itemListDel_.Equals(other.itemListDel_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemListTotal_.GetHashCode();
      hash ^= itemListAdd_.GetHashCode();
      hash ^= itemListChange_.GetHashCode();
      hash ^= itemListDel_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      itemListTotal_.WriteTo(output, _repeated_itemListTotal_codec);
      itemListAdd_.WriteTo(output, _repeated_itemListAdd_codec);
      itemListChange_.WriteTo(output, _repeated_itemListChange_codec);
      itemListDel_.WriteTo(output, _repeated_itemListDel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      itemListTotal_.WriteTo(ref output, _repeated_itemListTotal_codec);
      itemListAdd_.WriteTo(ref output, _repeated_itemListAdd_codec);
      itemListChange_.WriteTo(ref output, _repeated_itemListChange_codec);
      itemListDel_.WriteTo(ref output, _repeated_itemListDel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemListTotal_.CalculateSize(_repeated_itemListTotal_codec);
      size += itemListAdd_.CalculateSize(_repeated_itemListAdd_codec);
      size += itemListChange_.CalculateSize(_repeated_itemListChange_codec);
      size += itemListDel_.CalculateSize(_repeated_itemListDel_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(fd_item_list other) {
      if (other == null) {
        return;
      }
      itemListTotal_.Add(other.itemListTotal_);
      itemListAdd_.Add(other.itemListAdd_);
      itemListChange_.Add(other.itemListChange_);
      itemListDel_.Add(other.itemListDel_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 74: {
            itemListTotal_.AddEntriesFrom(input, _repeated_itemListTotal_codec);
            break;
          }
          case 82: {
            itemListAdd_.AddEntriesFrom(input, _repeated_itemListAdd_codec);
            break;
          }
          case 90: {
            itemListChange_.AddEntriesFrom(input, _repeated_itemListChange_codec);
            break;
          }
          case 98: {
            itemListDel_.AddEntriesFrom(input, _repeated_itemListDel_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 74: {
            itemListTotal_.AddEntriesFrom(ref input, _repeated_itemListTotal_codec);
            break;
          }
          case 82: {
            itemListAdd_.AddEntriesFrom(ref input, _repeated_itemListAdd_codec);
            break;
          }
          case 90: {
            itemListChange_.AddEntriesFrom(ref input, _repeated_itemListChange_codec);
            break;
          }
          case 98: {
            itemListDel_.AddEntriesFrom(ref input, _repeated_itemListDel_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class fd_item_map : pb::IMessage<fd_item_map>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<fd_item_map> _parser = new pb::MessageParser<fd_item_map>(() => new fd_item_map());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<fd_item_map> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Db.PersonReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_item_map() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_item_map(fd_item_map other) : this() {
      itemMapTotal_ = other.itemMapTotal_.Clone();
      itemMapAdd_ = other.itemMapAdd_.Clone();
      itemMapChange_ = other.itemMapChange_.Clone();
      itemMapDel_ = other.itemMapDel_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public fd_item_map Clone() {
      return new fd_item_map(this);
    }

    /// <summary>Field number for the "item_map_total" field.</summary>
    public const int ItemMapTotalFieldNumber = 21;
    private static readonly pbc::MapField<ulong, global::Db.fd_item>.Codec _map_itemMapTotal_codec
        = new pbc::MapField<ulong, global::Db.fd_item>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Db.fd_item.Parser), 170);
    private readonly pbc::MapField<ulong, global::Db.fd_item> itemMapTotal_ = new pbc::MapField<ulong, global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Db.fd_item> ItemMapTotal {
      get { return itemMapTotal_; }
    }

    /// <summary>Field number for the "item_map_add" field.</summary>
    public const int ItemMapAddFieldNumber = 22;
    private static readonly pbc::MapField<ulong, global::Db.fd_item>.Codec _map_itemMapAdd_codec
        = new pbc::MapField<ulong, global::Db.fd_item>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Db.fd_item.Parser), 178);
    private readonly pbc::MapField<ulong, global::Db.fd_item> itemMapAdd_ = new pbc::MapField<ulong, global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Db.fd_item> ItemMapAdd {
      get { return itemMapAdd_; }
    }

    /// <summary>Field number for the "item_map_change" field.</summary>
    public const int ItemMapChangeFieldNumber = 23;
    private static readonly pbc::MapField<ulong, global::Db.fd_item>.Codec _map_itemMapChange_codec
        = new pbc::MapField<ulong, global::Db.fd_item>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Db.fd_item.Parser), 186);
    private readonly pbc::MapField<ulong, global::Db.fd_item> itemMapChange_ = new pbc::MapField<ulong, global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Db.fd_item> ItemMapChange {
      get { return itemMapChange_; }
    }

    /// <summary>Field number for the "item_map_del" field.</summary>
    public const int ItemMapDelFieldNumber = 24;
    private static readonly pbc::MapField<ulong, global::Db.fd_item>.Codec _map_itemMapDel_codec
        = new pbc::MapField<ulong, global::Db.fd_item>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForMessage(18, global::Db.fd_item.Parser), 194);
    private readonly pbc::MapField<ulong, global::Db.fd_item> itemMapDel_ = new pbc::MapField<ulong, global::Db.fd_item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, global::Db.fd_item> ItemMapDel {
      get { return itemMapDel_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as fd_item_map);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(fd_item_map other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ItemMapTotal.Equals(other.ItemMapTotal)) return false;
      if (!ItemMapAdd.Equals(other.ItemMapAdd)) return false;
      if (!ItemMapChange.Equals(other.ItemMapChange)) return false;
      if (!ItemMapDel.Equals(other.ItemMapDel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ItemMapTotal.GetHashCode();
      hash ^= ItemMapAdd.GetHashCode();
      hash ^= ItemMapChange.GetHashCode();
      hash ^= ItemMapDel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      itemMapTotal_.WriteTo(output, _map_itemMapTotal_codec);
      itemMapAdd_.WriteTo(output, _map_itemMapAdd_codec);
      itemMapChange_.WriteTo(output, _map_itemMapChange_codec);
      itemMapDel_.WriteTo(output, _map_itemMapDel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      itemMapTotal_.WriteTo(ref output, _map_itemMapTotal_codec);
      itemMapAdd_.WriteTo(ref output, _map_itemMapAdd_codec);
      itemMapChange_.WriteTo(ref output, _map_itemMapChange_codec);
      itemMapDel_.WriteTo(ref output, _map_itemMapDel_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemMapTotal_.CalculateSize(_map_itemMapTotal_codec);
      size += itemMapAdd_.CalculateSize(_map_itemMapAdd_codec);
      size += itemMapChange_.CalculateSize(_map_itemMapChange_codec);
      size += itemMapDel_.CalculateSize(_map_itemMapDel_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(fd_item_map other) {
      if (other == null) {
        return;
      }
      itemMapTotal_.Add(other.itemMapTotal_);
      itemMapAdd_.Add(other.itemMapAdd_);
      itemMapChange_.Add(other.itemMapChange_);
      itemMapDel_.Add(other.itemMapDel_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 170: {
            itemMapTotal_.AddEntriesFrom(input, _map_itemMapTotal_codec);
            break;
          }
          case 178: {
            itemMapAdd_.AddEntriesFrom(input, _map_itemMapAdd_codec);
            break;
          }
          case 186: {
            itemMapChange_.AddEntriesFrom(input, _map_itemMapChange_codec);
            break;
          }
          case 194: {
            itemMapDel_.AddEntriesFrom(input, _map_itemMapDel_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 170: {
            itemMapTotal_.AddEntriesFrom(ref input, _map_itemMapTotal_codec);
            break;
          }
          case 178: {
            itemMapAdd_.AddEntriesFrom(ref input, _map_itemMapAdd_codec);
            break;
          }
          case 186: {
            itemMapChange_.AddEntriesFrom(ref input, _map_itemMapChange_codec);
            break;
          }
          case 194: {
            itemMapDel_.AddEntriesFrom(ref input, _map_itemMapDel_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class tb_person_merge : pb::IMessage<tb_person_merge>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<tb_person_merge> _parser = new pb::MessageParser<tb_person_merge>(() => new tb_person_merge());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<tb_person_merge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Db.PersonReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tb_person_merge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tb_person_merge(tb_person_merge other) : this() {
      _hasBits0 = other._hasBits0;
      uuid_ = other.uuid_;
      job_ = other.job_;
      name_ = other.name_;
      item_ = other.item_ != null ? other.item_.Clone() : null;
      itemList_ = other.itemList_ != null ? other.itemList_.Clone() : null;
      itemMap_ = other.itemMap_ != null ? other.itemMap_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public tb_person_merge Clone() {
      return new tb_person_merge(this);
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 1;
    private ulong uuid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Uuid {
      get { if ((_hasBits0 & 1) != 0) { return uuid_; } else { return 0UL; } }
      set {
        _hasBits0 |= 1;
        uuid_ = value;
      }
    }
    /// <summary>Gets whether the "uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUuid {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "uuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUuid() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "job" field.</summary>
    public const int JobFieldNumber = 2;
    private int job_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Job {
      get { if ((_hasBits0 & 2) != 0) { return job_; } else { return 0; } }
      set {
        _hasBits0 |= 2;
        job_ = value;
      }
    }
    /// <summary>Gets whether the "job" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasJob {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "job" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearJob() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? ""; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 19;
    private global::Db.fd_item item_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Db.fd_item Item {
      get { return item_; }
      set {
        item_ = value;
      }
    }

    /// <summary>Field number for the "item_list" field.</summary>
    public const int ItemListFieldNumber = 20;
    private global::Db.fd_item_list itemList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Db.fd_item_list ItemList {
      get { return itemList_; }
      set {
        itemList_ = value;
      }
    }

    /// <summary>Field number for the "item_map" field.</summary>
    public const int ItemMapFieldNumber = 21;
    private global::Db.fd_item_map itemMap_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Db.fd_item_map ItemMap {
      get { return itemMap_; }
      set {
        itemMap_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as tb_person_merge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(tb_person_merge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Uuid != other.Uuid) return false;
      if (Job != other.Job) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Item, other.Item)) return false;
      if (!object.Equals(ItemList, other.ItemList)) return false;
      if (!object.Equals(ItemMap, other.ItemMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUuid) hash ^= Uuid.GetHashCode();
      if (HasJob) hash ^= Job.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (item_ != null) hash ^= Item.GetHashCode();
      if (itemList_ != null) hash ^= ItemList.GetHashCode();
      if (itemMap_ != null) hash ^= ItemMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasUuid) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (HasJob) {
        output.WriteRawTag(16);
        output.WriteInt32(Job);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (item_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Item);
      }
      if (itemList_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ItemList);
      }
      if (itemMap_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ItemMap);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUuid) {
        output.WriteRawTag(8);
        output.WriteUInt64(Uuid);
      }
      if (HasJob) {
        output.WriteRawTag(16);
        output.WriteInt32(Job);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (item_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(Item);
      }
      if (itemList_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(ItemList);
      }
      if (itemMap_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ItemMap);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasUuid) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Uuid);
      }
      if (HasJob) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Job);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (item_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Item);
      }
      if (itemList_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ItemList);
      }
      if (itemMap_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ItemMap);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(tb_person_merge other) {
      if (other == null) {
        return;
      }
      if (other.HasUuid) {
        Uuid = other.Uuid;
      }
      if (other.HasJob) {
        Job = other.Job;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.item_ != null) {
        if (item_ == null) {
          Item = new global::Db.fd_item();
        }
        Item.MergeFrom(other.Item);
      }
      if (other.itemList_ != null) {
        if (itemList_ == null) {
          ItemList = new global::Db.fd_item_list();
        }
        ItemList.MergeFrom(other.ItemList);
      }
      if (other.itemMap_ != null) {
        if (itemMap_ == null) {
          ItemMap = new global::Db.fd_item_map();
        }
        ItemMap.MergeFrom(other.ItemMap);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Job = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 154: {
            if (item_ == null) {
              Item = new global::Db.fd_item();
            }
            input.ReadMessage(Item);
            break;
          }
          case 162: {
            if (itemList_ == null) {
              ItemList = new global::Db.fd_item_list();
            }
            input.ReadMessage(ItemList);
            break;
          }
          case 170: {
            if (itemMap_ == null) {
              ItemMap = new global::Db.fd_item_map();
            }
            input.ReadMessage(ItemMap);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Uuid = input.ReadUInt64();
            break;
          }
          case 16: {
            Job = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 154: {
            if (item_ == null) {
              Item = new global::Db.fd_item();
            }
            input.ReadMessage(Item);
            break;
          }
          case 162: {
            if (itemList_ == null) {
              ItemList = new global::Db.fd_item_list();
            }
            input.ReadMessage(ItemList);
            break;
          }
          case 170: {
            if (itemMap_ == null) {
              ItemMap = new global::Db.fd_item_map();
            }
            input.ReadMessage(ItemMap);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
